// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String        @unique
  email          String        @unique
  emailVerified  String?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  account        Account[]
  publications   Publication[]
  like           Like[]
  comment        Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Publication {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  authorship     String
  //author        String
  link           String?
  originalAuthor String?
  // collaborators String[]
  type           String
  fandom         String?
  group          String?
  characters     String[]
  rating         String
  relationships  String
  tags           String[]
  description    String
  notes          String
  access         String
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId
  likes          Like[]
  comments       Comment[]
}

model Like {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String      @map("_publicationId") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("_userId") @db.ObjectId
}

model Comment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  createdAt     DateTime    @default(now())
  publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String      @map("_publicationId") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("_userId") @db.ObjectId
}
